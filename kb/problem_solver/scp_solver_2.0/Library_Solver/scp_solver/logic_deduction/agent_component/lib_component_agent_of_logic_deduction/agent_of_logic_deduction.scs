agent_of_logic_deduction
=> nrel_main_idtf:
	[агентная scp-программа выполнения логического вывода] (* <- lang_ru;; *);
	[agent scp-program of logic deduction execution] (* <- lang_en;; *);
	<- agent_scp_program;;

scp_program -> agent_of_logic_deduction 
	(*
	-> rrel_params: .agent_of_logic_deduction_params 
		(*
		-> rrel_1: rrel_in: _event;;
		-> rrel_2: rrel_in: _input_arc;;
		*);;

	-> rrel_operators: .agent_of_logic_deduction_operator_set 
		(*
		-> rrel_init: .agent_of_logic_deduction_operator1A 
			(*
			<- searchElStr3;;

			-> rrel_1: rrel_assign: rrel_scp_var: _temp;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _input_arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _quest;;

			=> nrel_goto: .agent_of_logic_deduction_operator1B;;
			*);;

		-> .agent_of_logic_deduction_operator1B 
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_of_logic_deduction;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_then: .agent_of_logic_deduction_operator1C1;;
		  	=> nrel_else: .agent_of_logic_deduction_operator_return;;
			*);;
		
		-> .agent_of_logic_deduction_operator1C1 
			(*
		  	<- searchElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _object;;
                  	-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		  	-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;

		  	=> nrel_then: .agent_of_logic_deduction_operator1C2;;
		  	=> nrel_else: .agent_of_logic_deduction_operator_return;;
			*);;
		
		-> .agent_of_logic_deduction_operator1C2 
			(*
		  	<- searchElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _statement;;
                  	-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		  	-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;

		  	=> nrel_then: .agent_of_logic_deduction_operator1C3;;
		  	=> nrel_else: .agent_of_logic_deduction_operator_return;;
			*);;

		-> .agent_of_logic_deduction_operator1C3 
                 	(*
		 	<- contAssign;;

		 	-> rrel_1: rrel_assign: rrel_scp_var: _message;;
			-> rrel_2: rrel_fixed: rrel_scp_const: [No information!];;

		 	=> nrel_goto: .agent_of_logic_deduction_operator1C4;;
		 	*);; 

		-> .agent_of_logic_deduction_operator1C4
                 	(*
		 	<- genEl;;

		 	-> rrel_1: rrel_assign: rrel_const: rrel_struct: rrel_node: rrel_scp_var: _gen_result;;

		 	=> nrel_goto: .agent_of_logic_deduction_operator1C5;;
		 	*);;    

		-> .agent_of_logic_deduction_operator1C5
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: atomic_formula;; 
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _gen_result;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator2A;;
			*);;
	
		-> .agent_of_logic_deduction_operator2A 
			(*
		  	<- call;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: proc_of_logic_deduction;;
		  	-> rrel_2: rrel_fixed: rrel_scp_const: .agent_of_logic_deduction_operator2A_params 
		  		(*
				-> rrel_1: rrel_fixed: rrel_scp_var: _statement;;
                                -> rrel_2: rrel_fixed: rrel_scp_var: _object;;
                                -> rrel_3: rrel_fixed: rrel_scp_var: _gen_result;;
                                -> rrel_4: rrel_fixed: rrel_scp_var: _message;;
				*);;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _descr1;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator2B;;
			*);;

		-> .agent_of_logic_deduction_operator2B 
			(*
		  	<- waitReturn;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _descr1;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator2C1;;
			*);;      

		-> .agent_of_logic_deduction_operator2C1 
			(*
                  	<- stringIfEq;;

                     	-> rrel_1: rrel_fixed: rrel_scp_var: _message;;
                     	-> rrel_2: rrel_fixed: rrel_scp_const: [This statement will be included in solution decomposition!];;

                  	=> nrel_then: .agent_of_logic_deduction_operator2D1;;
                  	=> nrel_else: .agent_of_logic_deduction_operator2C2;;
               		*);;

		-> .agent_of_logic_deduction_operator2D1 
			(*
		  	<- genElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_common: rrel_const: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _gen_result;;
                  	-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_const: rrel_scp_var: _arc2;;
		  	-> rrel_5: rrel_fixed: rrel_scp_const: nrel_result;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator2D2;;
			*);;

		-> .agent_of_logic_deduction_operator2D2 
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: logic_sc_action;; 
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator2D3;;
			*);; 

		-> .agent_of_logic_deduction_operator2D3 
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: sc_action;; 
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator2D4;;
			*);;

		-> .agent_of_logic_deduction_operator2D4 
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_finished_successfully;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator_return;;
			*);;

		-> .agent_of_logic_deduction_operator2C2 
			(*
                  	<- stringIfEq;;

                     	-> rrel_1: rrel_fixed: rrel_scp_var: _message;;
                     	-> rrel_2: rrel_fixed: rrel_scp_const: [It must be solved by manager!];;

                  	=> nrel_then: .agent_of_logic_deduction_operator3A;;
                  	=> nrel_else: .agent_of_logic_deduction_operator2C3;;
               		*);;

		-> .agent_of_logic_deduction_operator2C3
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_finished_unsuccessfully;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator_return;;
			*);; 

		-> .agent_of_logic_deduction_operator3A 
		 	(*
		  	<- eraseElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_initiated;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_erase: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator3B;;
			*);;

		-> .agent_of_logic_deduction_operator3B 
			(*
			<- genEl;;

			-> rrel_1: rrel_assign: rrel_node: rrel_const: rrel_scp_var: _quest2;;

			=> nrel_goto: .agent_of_logic_deduction_operator3C;;
		 	*);;

		-> .agent_of_logic_deduction_operator3C
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest2;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _gen_result;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator3D;;
			*);;

		-> .agent_of_logic_deduction_operator3D 
                 	(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_of_calculating_math_expressions;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest2;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator3E;;
			*);;

		-> .agent_of_logic_deduction_operator3E 
                 	(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_initiated;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest2;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator4A1;;
			*);;

		-> .agent_of_logic_deduction_operator4A1 
                  	(*                                       
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_finished_unsuccessfully;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest2;;

		  	=> nrel_then: .agent_of_logic_deduction_operator5A1;;
		  	=> nrel_else: .agent_of_logic_deduction_operator4A2;;
			*);;

		-> .agent_of_logic_deduction_operator4A2 
                  	(*                                       
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_finished_successfully;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest2;;

		  	=> nrel_then: .agent_of_logic_deduction_operator6A1;;
		  	=> nrel_else: .agent_of_logic_deduction_operator4A3;;
			*);;

		-> .agent_of_logic_deduction_operator4A3 
			(*
		 	<- sys_wait;;

		 	-> rrel_1: rrel_fixed: rrel_scp_const: sc_event_add_input_arc;;
                 	-> rrel_2: rrel_fixed: rrel_scp_var: _quest2;;

		 	=> nrel_goto: .agent_of_logic_deduction_operator4A1;;
		 	*);;

		-> .agent_of_logic_deduction_operator5A1
			(*
		  	<- eraseElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_initiated;;
		  	-> rrel_2: rrel_assign: rrel_erase: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest2;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator5A2;;
			*);;

		-> .agent_of_logic_deduction_operator5A2 
            (*
		  	<- eraseElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_finished_unsuccessfully;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_erase: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest2;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator5A3;;
			*);;

		-> .agent_of_logic_deduction_operator5A3
			(*
                  	<- eraseEl;;

			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _quest2;;
			
                  	=> nrel_goto: .agent_of_logic_deduction_operator5A4;;
               		*);;

		-> .agent_of_logic_deduction_operator5A4 
            (*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_finished_partfully;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator_return;;
			*);;

		-> .agent_of_logic_deduction_operator6A1
			(*
		  	<- eraseElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_initiated;;
		  	-> rrel_2: rrel_assign: rrel_erase: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest2;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator6A2;;
			*);;

		-> .agent_of_logic_deduction_operator6A2 
			(*
		  	<- searchElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest2;;
		  	-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _math_result;;
                  	-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		  	-> rrel_5: rrel_fixed: rrel_scp_const: nrel_result;;

		  	=> nrel_then: .agent_of_logic_deduction_operator6A2233;;
			=> nrel_else: .agent_of_logic_deduction_operator5A4;;
			*);;

		-> .agent_of_logic_deduction_operator6A2233
			(*
                  	<- printEl;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _math_result;;
			
                  	=> nrel_goto: .agent_of_logic_deduction_operator6A3;;
               		*);;

		-> .agent_of_logic_deduction_operator6A3 
			(*
		  	<- genElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _math_result;;
                  	-> rrel_4: rrel_assign: rrel_const: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		  	-> rrel_5: rrel_fixed: rrel_scp_const: nrel_result;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator6A4;;
			*);;

		-> .agent_of_logic_deduction_operator6A4 
			(*
		  	<- eraseElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest2;;
		  	-> rrel_2: rrel_assign: rrel_erase: rrel_common: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _math_result;;
                  	-> rrel_4: rrel_assign: rrel_erase: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		  	-> rrel_5: rrel_fixed: rrel_scp_const: nrel_result;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator6A5;;
			*);;

		-> .agent_of_logic_deduction_operator6A5
			(*
                  	<- eraseEl;;

			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _quest2;;
			
                  	=> nrel_goto: .agent_of_logic_deduction_operator6A6;;
               		*);;

		-> .agent_of_logic_deduction_operator6A6
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: ariphmetic_sc_action;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator6A7;;
			*);;

		-> .agent_of_logic_deduction_operator6A7
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: sc_action;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator6A8;;
			*);;

		-> .agent_of_logic_deduction_operator6A8
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: atomic_formula;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _math_result;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator6A9;;
			*);;

		-> .agent_of_logic_deduction_operator6A9
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_finished_successfully;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_of_logic_deduction_operator_return;;
			*);;
					
		-> .agent_of_logic_deduction_operator_return 
			(*
		  	<- return;;
			*);;
		*);;
	*);;

























