agent_for_generating_inverse_theorem
=> nrel_main_idtf:
	[агентная scp-программа генерации обратной теоремы] (* <- lang_ru;; *);
	[agent scp-program of generating inverse theorem] (* <- lang_en;; *);
	<- agent_scp_program;;

scp_program -> agent_for_generating_inverse_theorem
	(*
	-> rrel_params: .agent_for_generating_inverse_theorem_params
		(*
		-> rrel_1: rrel_in: _event;;
		-> rrel_2: rrel_in: _input_arc;;
		*);;

	-> rrel_operators: .agent_for_generating_inverse_theorem_set
		(*
		-> rrel_init: .agent_for_generating_inverse_theorem1A
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_assign: rrel_scp_var: _temp_of_question;;
		  	-> rrel_2: rrel_fixed: rrel_scp_var: _input_arc;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _quest;;

		 	=> nrel_goto: .agent_for_generating_inverse_theorem1B;;
			*);;
		
		->.agent_for_generating_inverse_theorem1B
			(*
			<- searchElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_const: action_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

			=> nrel_then: .agent_for_generating_inverse_theorem1C;;
			=> nrel_else: .agent_for_generating_inverse_theorem_return;;
			*);;

		-> .agent_for_generating_inverse_theorem1C
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _param;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem1D;;
		  	=> nrel_else: .agent_for_generating_inverse_theorem_return;;
			*);;

		-> .agent_for_generating_inverse_theorem1D
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: statement;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _param;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem2D;;
		  	=> nrel_else: .agent_for_generating_inverse_theorem_return;;
			*);;

		-> .agent_for_generating_inverse_theorem2D
			(*
		  	<- searchElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_edge: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _reverse_theorem;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_reverse_theorem;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem_return;;   /////////////////существует такая теорема
		  	=> nrel_else: .agent_for_generating_inverse_theorem3D;;
			*);;

		-> .agent_for_generating_inverse_theorem3D
			(*
			<- genEl;;
		  	
			-> rrel_1: rrel_assign: rrel_const: rrel_scp_var: rrel_node: _answer_for_generating_inverse_theorem;;
			
			=> nrel_goto: .agent_for_generating_inverse_theorem4D;;
			*);;

		-> .agent_for_generating_inverse_theorem4D
			(*
		  	<- searchSetStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _struct;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_main_key_sc_element;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_3: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_4: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem5D;;   
		  	=> nrel_else: .agent_for_generating_inverse_theorem_erase_answer;;  /////////////////////нет теоремы
			*);;

		-> .agent_for_generating_inverse_theorem5D
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _param;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem6D;;
			*);;

		-> .agent_for_generating_inverse_theorem6D
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_const: rrel_main_key_sc_element;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem7D;;
			*);;

		-> .agent_for_generating_inverse_theorem7D
			(*
		  	<- searchSetStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: nrel_implication;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _struct;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem8D;;   
		  	=> nrel_else: .agent_for_generating_inverse_theorem9D;;
			*);;

		-> .agent_for_generating_inverse_theorem8D
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_const: nrel_implication;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem11D;;
			*);;

		-> .agent_for_generating_inverse_theorem9D
			(*
		  	<- searchSetStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: nrel_equivalence;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _struct;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem10D;;   
		  	=> nrel_else: .agent_for_generating_inverse_theorem_erase_answer;; //// нет структуры
			*);;

		-> .agent_for_generating_inverse_theorem10D
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_const: nrel_equivalence;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem1E;;
			*);;

		-> .agent_for_generating_inverse_theorem11D
			(*
		  	<- searchSetStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _struct;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _node_if;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_if;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_3: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_4: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem12D;;   
		  	=> nrel_else: .agent_for_generating_inverse_theorem_erase_answer;;  /////////////////////нет значения if(если)
			*);;

		-> .agent_for_generating_inverse_theorem12D
			(*
		  	<- searchSetStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _struct;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _node_then;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_then;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_3: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_4: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem13D;;   //
		  	=> nrel_else: .agent_for_generating_inverse_theorem_erase_answer;;  /////////////////////нет значения then(то)
			*);;

		-> .agent_for_generating_inverse_theorem13D
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_const: rrel_if;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem14D;;
			*);;

		-> .agent_for_generating_inverse_theorem14D
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_const: rrel_then;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem15D;;
			*);;

		-> .agent_for_generating_inverse_theorem1E
			(*
		  	<- searchSetStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _struct;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_assign: rrel_scp_var: _node_equv;;

			-> rrel_set_3: rrel_assign: rrel_scp_var: _set_of_equv_struct;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem2E;;   
		  	=> nrel_else: .agent_for_generating_inverse_theorem_erase_answer;;  /////////////////////нет значения if(если)
			*);;

		-> .agent_for_generating_inverse_theorem2E
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _set_of_equv_struct;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_remove;;
			-> rrel_3: rrel_assign: rrel_scp_var: _node_equv;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem4E;;   
		  	=> nrel_else: .agent_for_generating_inverse_theorem3E;;  /////////////////////нет значения if(если)
			*);;

		-> .agent_for_generating_inverse_theorem3E
			(*
		  	<- searchSetStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _struct;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_assign: rrel_scp_var: _node_equv;;

			-> rrel_set_3: rrel_assign: rrel_scp_var: _set_of_equv_struct;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem1F;;   
			*);;

		-> .agent_for_generating_inverse_theorem4E
			(*
			<- eraseEl;;

			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc_remove;;
			
			=> nrel_goto: .agent_for_generating_inverse_theorem5E;;
			*);;

		-> .agent_for_generating_inverse_theorem5E
			(*
		  	<- searchSetStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _node_equv;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _node;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_3: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem6E;;   
		  	*);;

		 -> .agent_for_generating_inverse_theorem6E
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _struct;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _node_equv;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem7E;;
			*);;

		-> .agent_for_generating_inverse_theorem7E
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _arc_add;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem8E;;
			*);;

		-> .agent_for_generating_inverse_theorem8E
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _node_equv;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem2E;;
			*);;

		-> .agent_for_generating_inverse_theorem15D
			(*
		  	<- searchSetStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _node_if;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _node;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_3: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem16D;;   
		  	*);;

		-> .agent_for_generating_inverse_theorem16D
			(*
		  	<- searchSetStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _node_then;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _node;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_3: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem1F;;
			*);;

		-> .agent_for_generating_inverse_theorem1F
			(*
		  	<- genElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_edge: rrel_const: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _reverse_theorem;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_reverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem2F;;
			*);;

		-> .agent_for_generating_inverse_theorem2F
			(*
		  	<- searchSetStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_edge: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _reverse_theorem;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_reverse_theorem;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_4: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem3F;;
			*);;

		-> .agent_for_generating_inverse_theorem3F
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: statement;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _reverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem4F;;
			*);;

		-> .agent_for_generating_inverse_theorem4F
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _reverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem5F;;
			*);;

		-> .agent_for_generating_inverse_theorem5F
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_const: nrel_reverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem6F;;
			*);;

		-> .agent_for_generating_inverse_theorem6F
			(*
		  	<- genElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _reverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: rrel_const: _struct_reverse_theorem;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_main_key_sc_element;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem7F;;
			*);;

		-> .agent_for_generating_inverse_theorem7F
			(*
		  	<- genElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_node: rrel_const: _struct_reverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem8F;;
			*);;

		-> .agent_for_generating_inverse_theorem8F
			(*
		  	<- searchSetStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _reverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _struct_reverse_theorem;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_main_key_sc_element;;

			-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_4: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem9F;;
			*);;

		-> .agent_for_generating_inverse_theorem9F
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_const: nrel_implication;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem10F;;   
		  	=> nrel_else: .agent_for_generating_inverse_theorem11F;;
			*);;

		-> .agent_for_generating_inverse_theorem10F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_const: nrel_implication;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _struct_reverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem12F;;
			*);;

		-> .agent_for_generating_inverse_theorem11F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_const: nrel_equivalence;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _struct_reverse_theorem;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem13F;;
			*);;

		-> .agent_for_generating_inverse_theorem12F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _arc_add;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem14F;;
			*);;

		-> .agent_for_generating_inverse_theorem13F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _arc_add;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem1G;;
			*);;

		-> .agent_for_generating_inverse_theorem14F
			(*
		 	<- genElStr5;;

		 	-> rrel_1: rrel_fixed: rrel_scp_var: _struct_reverse_theorem;;
		 	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc_add1;;
		 	-> rrel_3: rrel_assign: rrel_scp_var: rrel_const: rrel_node: _struct_reverse_if;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc_add2;;
		 	-> rrel_5: rrel_fixed: rrel_scp_const: rrel_if;;

			=> nrel_goto: .agent_for_generating_inverse_theorem15F;;
			*);;

		-> .agent_for_generating_inverse_theorem15F
			(*
		 	<- searchSetStr5;;

		 	-> rrel_1: rrel_fixed: rrel_scp_var: _struct_reverse_theorem;;
		 	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc_add1;;
		 	-> rrel_3: rrel_fixed: rrel_scp_var: _struct_reverse_if;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc_add2;;
		 	-> rrel_5: rrel_fixed: rrel_scp_const: rrel_if;;

		 	-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_4: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

			=> nrel_goto: .agent_for_generating_inverse_theorem16F;;
			*);;

		-> .agent_for_generating_inverse_theorem16F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: rrel_node: _struct_reverse_if;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem21F;;
			*);;

		-> .agent_for_generating_inverse_theorem17F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _struct_reverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_const: rrel_node: _struct_reverse_if;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem18F;;
			*);;

		-> .agent_for_generating_inverse_theorem18F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _arc_add;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem19F;;
			*);;

		-> .agent_for_generating_inverse_theorem19F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _struct_reverse_if;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem20F;;
			*);;

		-> .agent_for_generating_inverse_theorem20F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _struct_reverse_if;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _node_then;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem21F;;
			*);;

		-> .agent_for_generating_inverse_theorem21F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _arc_add;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem22F;;
			*);;

		-> .agent_for_generating_inverse_theorem22F
			(*
		 	<- genElStr5;;

		 	-> rrel_1: rrel_fixed: rrel_scp_var: _struct_reverse_theorem;;
		 	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc_add1;;
		 	-> rrel_3: rrel_assign: rrel_scp_var: rrel_const: rrel_node: _struct_reverse_then;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc_add2;;
		 	-> rrel_5: rrel_fixed: rrel_scp_const: rrel_then;;

			=> nrel_goto: .agent_for_generating_inverse_theorem23F;;
			*);;

		-> .agent_for_generating_inverse_theorem23F
			(*
		 	<- searchSetStr5;;

		 	-> rrel_1: rrel_fixed: rrel_scp_var: _struct_reverse_theorem;;
		 	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc_add1;;
		 	-> rrel_3: rrel_fixed: rrel_scp_var: _struct_reverse_then;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: rrel_const: _arc_add2;;
		 	-> rrel_5: rrel_fixed: rrel_scp_const: rrel_then;;

		 	-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_set_4: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;

			=> nrel_goto: .agent_for_generating_inverse_theorem24F;;
			*);;

		-> .agent_for_generating_inverse_theorem24F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: rrel_node: _struct_reverse_then;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem25F;;
			*);;

		-> .agent_for_generating_inverse_theorem25F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _struct_reverse_then;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem26F;;
			*);;

		-> .agent_for_generating_inverse_theorem26F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _struct_reverse_then;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _node_if;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem27F;;
			*);;

		-> .agent_for_generating_inverse_theorem27F
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _arc_add;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem_find_context;;
			*);;

		/////////////////////////////////////

		-> .agent_for_generating_inverse_theorem1G
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _set_of_equv_struct;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_remove;;
			-> rrel_3: rrel_assign: rrel_scp_var: _node_equv;;

		  	=> nrel_then: .agent_for_generating_inverse_theorem2G;;   
		  	=> nrel_else: .agent_for_generating_inverse_theorem_erase_set;;  /////////////////////нет значения if(если)
			*);;

		-> .agent_for_generating_inverse_theorem2G
			(*
			<- eraseEl;;

			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc_remove;;
			
			=> nrel_goto: .agent_for_generating_inverse_theorem3G;;
			*);;

		-> .agent_for_generating_inverse_theorem3G
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _struct_reverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_const: rrel_node: _struct_reverse_equv;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem4G;;
			*);;

		-> .agent_for_generating_inverse_theorem4G
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _arc_add;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem5G;;
			*);;

		-> .agent_for_generating_inverse_theorem5G
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _struct_reverse_equv;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem6G;;
			*);;

		-> .agent_for_generating_inverse_theorem6G
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _struct_reverse_equv;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc_add;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _node_equv;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem7G;;
			*);;

		-> .agent_for_generating_inverse_theorem7G
			(*
		  	<- genElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: rrel_const: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: rrel_const: _arc_add;;

		  	=> nrel_goto: .agent_for_generating_inverse_theorem1G;;
			*);;
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
		

		-> .agent_for_generating_inverse_theorem_erase_set
			(*
			<- eraseEl;;

			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _set_of_equv_struct;;
			
			=> nrel_goto: .agent_for_generating_inverse_theorem_find_context;;
			*);;

		-> .agent_for_generating_inverse_theorem_find_context
			(*
		 	<- searchElStr5;;

		 	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		 	-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc1;;
		 	-> rrel_3: rrel_assign: rrel_scp_var: _context;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		 	-> rrel_5: rrel_fixed: rrel_scp_const: nrel_context_of_action;;

			=> nrel_then: .agent_for_generating_inverse_theorem_set_context_existence_to_true;;
			=> nrel_else: .agent_for_generating_inverse_theorem_set_context_existence_to_false;;
			*);;	

        -> .agent_for_generating_inverse_theorem_set_context_existence_to_true
			(*
			<- contAssign;;			
			
			-> rrel_1: rrel_assign: rrel_scp_var:  _is_context_exist;;
			-> rrel_2: rrel_fixed: rrel_scp_const: [true];;

			=> nrel_goto: .agent_for_generating_inverse_theorem2H;;
			*);; 

		  -> .agent_for_generating_inverse_theorem_set_context_existence_to_false
			(*
			<- contAssign;;			
			
			-> rrel_1: rrel_assign: rrel_scp_var:  _is_context_exist;;
			-> rrel_2: rrel_fixed: rrel_scp_const: [false];;

			=> nrel_goto: .agent_for_generating_inverse_theorem1H;;
			*);;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		-> .agent_for_generating_inverse_theorem2H
			(*
			<- searchSetStr3;;
			
			-> rrel_1: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: node;;

		  	-> rrel_set_2: rrel_fixed: rrel_scp_const: _context;;
		  	-> rrel_set_3: rrel_fixed: rrel_scp_const: _context;;

			=> nrel_goto: .agent_for_generating_inverse_theorem1H;;	
			*);;

		-> .agent_for_generating_inverse_theorem1H
			(*
			<- genElStr5;;
			
			-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
			-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			-> rrel_4: rrel_assign: rrel_const: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_answer;;

			=> nrel_goto: .agent_for_generating_inverse_theorem_return;;	
			*);;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		-> .agent_for_generating_inverse_theorem_erase_answer
			(*
			<- eraseEl;;

			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _answer_for_generating_inverse_theorem;;
			
			=> nrel_goto: .agent_for_generating_inverse_theorem_return;;
			*);;

		-> .agent_for_generating_inverse_theorem_return
			(*
			<- return;;
			*);;

		*);;
	*);;
